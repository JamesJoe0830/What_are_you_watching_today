{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return typeof key === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nimport { NativeReanimated } from '../NativeReanimated/NativeReanimated';\nimport { SensorType } from '../commonTypes';\nexport default class JSReanimated extends NativeReanimated {\n  constructor() {\n    super(false);\n    _defineProperty(this, \"nextSensorId\", 0);\n    _defineProperty(this, \"sensors\", new Map());\n  }\n  makeShareableClone(value) {\n    return {\n      __hostObjectShareableJSRef: value\n    };\n  }\n  installCoreFunctions(_callGuard, _valueUnpacker) {\n    // noop\n  }\n  scheduleOnUI(worklet) {\n    // @ts-ignore web implementation has still not been updated after the rewrite, this will be addressed once the web implementation updates are ready\n    requestAnimationFrame(worklet);\n  }\n  registerEventHandler(_eventHash, _eventHandler) {\n    // noop\n    return '';\n  }\n  unregisterEventHandler(_) {\n    // noop\n  }\n  enableLayoutAnimations() {\n    console.warn('[Reanimated] Layout Animations are not supported on web yet.');\n  }\n  configureLayoutAnimation() {\n    // no-op\n  }\n  registerSensor(sensorType, interval, iosReferenceFrame, eventHandler) {\n    if (!(this.getSensorName(sensorType) in window)) {\n      return -1;\n    }\n    const sensor = this.initializeSensor(sensorType, interval);\n    let callback;\n    if (sensorType === SensorType.ROTATION) {\n      callback = () => {\n        const [qw, qx, qy, qz] = sensor.quaternion;\n\n        // reference: https://stackoverflow.com/questions/5782658/extracting-yaw-from-a-quaternion\n        const yaw = Math.atan2(2.0 * (qy * qz + qw * qx), qw * qw - qx * qx - qy * qy + qz * qz);\n        const pitch = Math.sin(-2.0 * (qx * qz - qw * qy));\n        const roll = Math.atan2(2.0 * (qx * qy + qw * qz), qw * qw + qx * qx - qy * qy - qz * qz);\n        eventHandler({\n          qw,\n          qx,\n          qy,\n          qz,\n          yaw,\n          pitch,\n          roll,\n          interfaceOrientation: 0\n        });\n      };\n    } else {\n      callback = () => {\n        const {\n          x,\n          y,\n          z\n        } = sensor;\n        eventHandler({\n          x,\n          y,\n          z,\n          interfaceOrientation: 0\n        });\n      };\n    }\n    sensor.addEventListener('reading', callback);\n    sensor.start();\n    this.sensors.set(this.nextSensorId, sensor);\n    return this.nextSensorId++;\n  }\n  unregisterSensor(id) {\n    const sensor = this.sensors.get(id);\n    if (sensor !== undefined) {\n      sensor.stop();\n      this.sensors.delete(id);\n    }\n  }\n  subscribeForKeyboardEvents(_) {\n    console.warn('[Reanimated] useAnimatedKeyboard is not available on web yet.');\n    return -1;\n  }\n  unsubscribeFromKeyboardEvents(_) {\n    // noop\n  }\n  initializeSensor(sensorType, interval) {\n    const config = interval <= 0 ? {\n      referenceFrame: 'device'\n    } : {\n      frequency: 1000 / interval\n    };\n    switch (sensorType) {\n      case SensorType.ACCELEROMETER:\n        return new window.Accelerometer(config);\n      case SensorType.GYROSCOPE:\n        return new window.Gyroscope(config);\n      case SensorType.GRAVITY:\n        return new window.GravitySensor(config);\n      case SensorType.MAGNETIC_FIELD:\n        return new window.Magnetometer(config);\n      case SensorType.ROTATION:\n        return new window.AbsoluteOrientationSensor(config);\n    }\n  }\n  getSensorName(sensorType) {\n    switch (sensorType) {\n      case SensorType.ACCELEROMETER:\n        return 'Accelerometer';\n      case SensorType.GRAVITY:\n        return 'GravitySensor';\n      case SensorType.GYROSCOPE:\n        return 'Gyroscope';\n      case SensorType.MAGNETIC_FIELD:\n        return 'Magnetometer';\n      case SensorType.ROTATION:\n        return 'AbsoluteOrientationSensor';\n    }\n  }\n}","map":{"version":3,"names":["NativeReanimated","SensorType","JSReanimated","constructor","_defineProperty","Map","makeShareableClone","value","__hostObjectShareableJSRef","installCoreFunctions","_callGuard","_valueUnpacker","scheduleOnUI","worklet","requestAnimationFrame","registerEventHandler","_eventHash","_eventHandler","unregisterEventHandler","_","enableLayoutAnimations","console","warn","configureLayoutAnimation","registerSensor","sensorType","interval","iosReferenceFrame","eventHandler","getSensorName","window","sensor","initializeSensor","callback","ROTATION","qw","qx","qy","qz","quaternion","yaw","Math","atan2","pitch","sin","roll","interfaceOrientation","x","y","z","addEventListener","start","sensors","set","nextSensorId","unregisterSensor","id","get","undefined","stop","delete","subscribeForKeyboardEvents","unsubscribeFromKeyboardEvents","config","referenceFrame","frequency","ACCELEROMETER","Accelerometer","GYROSCOPE","Gyroscope","GRAVITY","GravitySensor","MAGNETIC_FIELD","Magnetometer","AbsoluteOrientationSensor"],"sources":["/Users/jojaegyun/Desktop/Project/today/What_are_you_watching_today/node_modules/react-native-reanimated/lib/module/reanimated2/js-reanimated/JSReanimated.ts"],"sourcesContent":["import { NativeReanimated } from '../NativeReanimated/NativeReanimated';\nimport {\n  SensorType,\n  ShareableRef,\n  Value3D,\n  ValueRotation,\n} from '../commonTypes';\nimport { WebSensor } from './WebSensor';\n\nexport default class JSReanimated extends NativeReanimated {\n  nextSensorId = 0;\n  sensors = new Map<number, WebSensor>();\n\n  constructor() {\n    super(false);\n  }\n\n  makeShareableClone<T>(value: T): ShareableRef<T> {\n    return { __hostObjectShareableJSRef: value };\n  }\n\n  installCoreFunctions(\n    _callGuard: <T extends Array<any>, U>(\n      fn: (...args: T) => U,\n      ...args: T\n    ) => void,\n    _valueUnpacker: <T>(value: T) => T\n  ): void {\n    // noop\n  }\n\n  scheduleOnUI<T>(worklet: ShareableRef<T>) {\n    // @ts-ignore web implementation has still not been updated after the rewrite, this will be addressed once the web implementation updates are ready\n    requestAnimationFrame(worklet);\n  }\n\n  registerEventHandler<T>(\n    _eventHash: string,\n    _eventHandler: ShareableRef<T>\n  ): string {\n    // noop\n    return '';\n  }\n\n  unregisterEventHandler(_: string): void {\n    // noop\n  }\n\n  enableLayoutAnimations() {\n    console.warn(\n      '[Reanimated] Layout Animations are not supported on web yet.'\n    );\n  }\n\n  configureLayoutAnimation() {\n    // no-op\n  }\n\n  registerSensor(\n    sensorType: SensorType,\n    interval: number,\n    iosReferenceFrame: number,\n    eventHandler: (data: Value3D | ValueRotation) => void\n  ): number {\n    if (!(this.getSensorName(sensorType) in window)) {\n      return -1;\n    }\n\n    const sensor: WebSensor = this.initializeSensor(sensorType, interval);\n    let callback;\n    if (sensorType === SensorType.ROTATION) {\n      callback = () => {\n        const [qw, qx, qy, qz] = sensor.quaternion;\n\n        // reference: https://stackoverflow.com/questions/5782658/extracting-yaw-from-a-quaternion\n        const yaw = Math.atan2(\n          2.0 * (qy * qz + qw * qx),\n          qw * qw - qx * qx - qy * qy + qz * qz\n        );\n        const pitch = Math.sin(-2.0 * (qx * qz - qw * qy));\n        const roll = Math.atan2(\n          2.0 * (qx * qy + qw * qz),\n          qw * qw + qx * qx - qy * qy - qz * qz\n        );\n        eventHandler({\n          qw,\n          qx,\n          qy,\n          qz,\n          yaw,\n          pitch,\n          roll,\n          interfaceOrientation: 0,\n        });\n      };\n    } else {\n      callback = () => {\n        const { x, y, z } = sensor;\n        eventHandler({ x, y, z, interfaceOrientation: 0 });\n      };\n    }\n    sensor.addEventListener('reading', callback);\n    sensor.start();\n\n    this.sensors.set(this.nextSensorId, sensor);\n    return this.nextSensorId++;\n  }\n\n  unregisterSensor(id: number): void {\n    const sensor: WebSensor | undefined = this.sensors.get(id);\n    if (sensor !== undefined) {\n      sensor.stop();\n      this.sensors.delete(id);\n    }\n  }\n\n  subscribeForKeyboardEvents(_: ShareableRef<number>): number {\n    console.warn(\n      '[Reanimated] useAnimatedKeyboard is not available on web yet.'\n    );\n    return -1;\n  }\n\n  unsubscribeFromKeyboardEvents(_: number): void {\n    // noop\n  }\n\n  initializeSensor(sensorType: SensorType, interval: number): WebSensor {\n    const config =\n      interval <= 0\n        ? { referenceFrame: 'device' }\n        : { frequency: 1000 / interval };\n    switch (sensorType) {\n      case SensorType.ACCELEROMETER:\n        return new window.Accelerometer(config);\n      case SensorType.GYROSCOPE:\n        return new window.Gyroscope(config);\n      case SensorType.GRAVITY:\n        return new window.GravitySensor(config);\n      case SensorType.MAGNETIC_FIELD:\n        return new window.Magnetometer(config);\n      case SensorType.ROTATION:\n        return new window.AbsoluteOrientationSensor(config);\n    }\n  }\n\n  getSensorName(sensorType: SensorType): string {\n    switch (sensorType) {\n      case SensorType.ACCELEROMETER:\n        return 'Accelerometer';\n      case SensorType.GRAVITY:\n        return 'GravitySensor';\n      case SensorType.GYROSCOPE:\n        return 'Gyroscope';\n      case SensorType.MAGNETIC_FIELD:\n        return 'Magnetometer';\n      case SensorType.ROTATION:\n        return 'AbsoluteOrientationSensor';\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}