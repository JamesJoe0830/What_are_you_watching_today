{"ast":null,"code":"import { CommonActions, DrawerActions, useLinkBuilder } from '@react-navigation/native';\nimport * as React from 'react';\nimport DrawerItem from './DrawerItem';\n/**\n * Component that renders the navigation list in the drawer.\n */\nexport default function DrawerItemList(_ref) {\n  let {\n    state,\n    navigation,\n    descriptors\n  } = _ref;\n  const buildLink = useLinkBuilder();\n  const focusedRoute = state.routes[state.index];\n  const focusedDescriptor = descriptors[focusedRoute.key];\n  const focusedOptions = focusedDescriptor.options;\n  const {\n    drawerActiveTintColor,\n    drawerInactiveTintColor,\n    drawerActiveBackgroundColor,\n    drawerInactiveBackgroundColor\n  } = focusedOptions;\n  return state.routes.map((route, i) => {\n    const focused = i === state.index;\n    const onPress = () => {\n      const event = navigation.emit({\n        type: 'drawerItemPress',\n        target: route.key,\n        canPreventDefault: true\n      });\n      if (!event.defaultPrevented) {\n        navigation.dispatch({\n          ...(focused ? DrawerActions.closeDrawer() : CommonActions.navigate({\n            name: route.name,\n            merge: true\n          })),\n          target: state.key\n        });\n      }\n    };\n    const {\n      title,\n      drawerLabel,\n      drawerIcon,\n      drawerLabelStyle,\n      drawerItemStyle,\n      drawerAllowFontScaling\n    } = descriptors[route.key].options;\n    return /*#__PURE__*/React.createElement(DrawerItem, {\n      key: route.key,\n      label: drawerLabel !== undefined ? drawerLabel : title !== undefined ? title : route.name,\n      icon: drawerIcon,\n      focused: focused,\n      activeTintColor: drawerActiveTintColor,\n      inactiveTintColor: drawerInactiveTintColor,\n      activeBackgroundColor: drawerActiveBackgroundColor,\n      inactiveBackgroundColor: drawerInactiveBackgroundColor,\n      allowFontScaling: drawerAllowFontScaling,\n      labelStyle: drawerLabelStyle,\n      style: drawerItemStyle,\n      to: buildLink(route.name, route.params),\n      onPress: onPress\n    });\n  });\n}","map":{"version":3,"names":["CommonActions","DrawerActions","useLinkBuilder","React","DrawerItem","DrawerItemList","_ref","state","navigation","descriptors","buildLink","focusedRoute","routes","index","focusedDescriptor","key","focusedOptions","options","drawerActiveTintColor","drawerInactiveTintColor","drawerActiveBackgroundColor","drawerInactiveBackgroundColor","map","route","i","focused","onPress","event","emit","type","target","canPreventDefault","defaultPrevented","dispatch","closeDrawer","navigate","name","merge","title","drawerLabel","drawerIcon","drawerLabelStyle","drawerItemStyle","drawerAllowFontScaling","createElement","label","undefined","icon","activeTintColor","inactiveTintColor","activeBackgroundColor","inactiveBackgroundColor","allowFontScaling","labelStyle","style","to","params"],"sources":["/Users/jojaegyun/Desktop/Project/today/What_are_you_watching_today/node_modules/@react-navigation/drawer/src/views/DrawerItemList.tsx"],"sourcesContent":["import {\n  CommonActions,\n  DrawerActions,\n  DrawerNavigationState,\n  ParamListBase,\n  useLinkBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\n\nimport type { DrawerDescriptorMap, DrawerNavigationHelpers } from '../types';\nimport DrawerItem from './DrawerItem';\n\ntype Props = {\n  state: DrawerNavigationState<ParamListBase>;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\n/**\n * Component that renders the navigation list in the drawer.\n */\nexport default function DrawerItemList({\n  state,\n  navigation,\n  descriptors,\n}: Props) {\n  const buildLink = useLinkBuilder();\n\n  const focusedRoute = state.routes[state.index];\n  const focusedDescriptor = descriptors[focusedRoute.key];\n  const focusedOptions = focusedDescriptor.options;\n\n  const {\n    drawerActiveTintColor,\n    drawerInactiveTintColor,\n    drawerActiveBackgroundColor,\n    drawerInactiveBackgroundColor,\n  } = focusedOptions;\n\n  return state.routes.map((route, i) => {\n    const focused = i === state.index;\n\n    const onPress = () => {\n      const event = navigation.emit({\n        type: 'drawerItemPress',\n        target: route.key,\n        canPreventDefault: true,\n      });\n\n      if (!event.defaultPrevented) {\n        navigation.dispatch({\n          ...(focused\n            ? DrawerActions.closeDrawer()\n            : CommonActions.navigate({ name: route.name, merge: true })),\n          target: state.key,\n        });\n      }\n    };\n\n    const {\n      title,\n      drawerLabel,\n      drawerIcon,\n      drawerLabelStyle,\n      drawerItemStyle,\n      drawerAllowFontScaling,\n    } = descriptors[route.key].options;\n\n    return (\n      <DrawerItem\n        key={route.key}\n        label={\n          drawerLabel !== undefined\n            ? drawerLabel\n            : title !== undefined\n            ? title\n            : route.name\n        }\n        icon={drawerIcon}\n        focused={focused}\n        activeTintColor={drawerActiveTintColor}\n        inactiveTintColor={drawerInactiveTintColor}\n        activeBackgroundColor={drawerActiveBackgroundColor}\n        inactiveBackgroundColor={drawerInactiveBackgroundColor}\n        allowFontScaling={drawerAllowFontScaling}\n        labelStyle={drawerLabelStyle}\n        style={drawerItemStyle}\n        to={buildLink(route.name, route.params)}\n        onPress={onPress}\n      />\n    );\n  }) as React.ReactNode as React.ReactElement;\n}\n"],"mappings":"AAAA,SACEA,aAAa,EACbC,aAAa,EAGbC,cAAc,QACT,0BAA0B;AACjC,OAAO,KAAKC,KAAK,MAAM,OAAO;AAG9B,OAAOC,UAAU,MAAM,cAAc;AAQrC;AACA;AACA;AACA,eAAe,SAASC,cAAcA,CAAAC,IAAA,EAI5B;EAAA,IAJ6B;IACrCC,KAAK;IACLC,UAAU;IACVC;EACK,CAAC,GAAAH,IAAA;EACN,MAAMI,SAAS,GAAGR,cAAc,EAAE;EAElC,MAAMS,YAAY,GAAGJ,KAAK,CAACK,MAAM,CAACL,KAAK,CAACM,KAAK,CAAC;EAC9C,MAAMC,iBAAiB,GAAGL,WAAW,CAACE,YAAY,CAACI,GAAG,CAAC;EACvD,MAAMC,cAAc,GAAGF,iBAAiB,CAACG,OAAO;EAEhD,MAAM;IACJC,qBAAqB;IACrBC,uBAAuB;IACvBC,2BAA2B;IAC3BC;EACF,CAAC,GAAGL,cAAc;EAElB,OAAOT,KAAK,CAACK,MAAM,CAACU,GAAG,CAAC,CAACC,KAAK,EAAEC,CAAC,KAAK;IACpC,MAAMC,OAAO,GAAGD,CAAC,KAAKjB,KAAK,CAACM,KAAK;IAEjC,MAAMa,OAAO,GAAGA,CAAA,KAAM;MACpB,MAAMC,KAAK,GAAGnB,UAAU,CAACoB,IAAI,CAAC;QAC5BC,IAAI,EAAE,iBAAiB;QACvBC,MAAM,EAAEP,KAAK,CAACR,GAAG;QACjBgB,iBAAiB,EAAE;MACrB,CAAC,CAAC;MAEF,IAAI,CAACJ,KAAK,CAACK,gBAAgB,EAAE;QAC3BxB,UAAU,CAACyB,QAAQ,CAAC;UAClB,IAAIR,OAAO,GACPxB,aAAa,CAACiC,WAAW,EAAE,GAC3BlC,aAAa,CAACmC,QAAQ,CAAC;YAAEC,IAAI,EAAEb,KAAK,CAACa,IAAI;YAAEC,KAAK,EAAE;UAAK,CAAC,CAAC,CAAC;UAC9DP,MAAM,EAAEvB,KAAK,CAACQ;QAChB,CAAC,CAAC;MACJ;IACF,CAAC;IAED,MAAM;MACJuB,KAAK;MACLC,WAAW;MACXC,UAAU;MACVC,gBAAgB;MAChBC,eAAe;MACfC;IACF,CAAC,GAAGlC,WAAW,CAACc,KAAK,CAACR,GAAG,CAAC,CAACE,OAAO;IAElC,oBACEd,KAAA,CAAAyC,aAAA,CAACxC,UAAU;MACTW,GAAG,EAAEQ,KAAK,CAACR,GAAI;MACf8B,KAAK,EACHN,WAAW,KAAKO,SAAS,GACrBP,WAAW,GACXD,KAAK,KAAKQ,SAAS,GACnBR,KAAK,GACLf,KAAK,CAACa,IACX;MACDW,IAAI,EAAEP,UAAW;MACjBf,OAAO,EAAEA,OAAQ;MACjBuB,eAAe,EAAE9B,qBAAsB;MACvC+B,iBAAiB,EAAE9B,uBAAwB;MAC3C+B,qBAAqB,EAAE9B,2BAA4B;MACnD+B,uBAAuB,EAAE9B,6BAA8B;MACvD+B,gBAAgB,EAAET,sBAAuB;MACzCU,UAAU,EAAEZ,gBAAiB;MAC7Ba,KAAK,EAAEZ,eAAgB;MACvBa,EAAE,EAAE7C,SAAS,CAACa,KAAK,CAACa,IAAI,EAAEb,KAAK,CAACiC,MAAM,CAAE;MACxC9B,OAAO,EAAEA;IAAQ,EACjB;EAEN,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}