{"ast":null,"code":"function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { PlatformPressable } from '@react-navigation/elements';\nimport { Link, useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport * as React from 'react';\nimport { Platform, StyleSheet, Text, View } from 'react-native';\nconst LinkPressable = _ref => {\n  let {\n    children,\n    style,\n    onPress,\n    onLongPress,\n    onPressIn,\n    onPressOut,\n    to,\n    accessibilityRole,\n    ...rest\n  } = _ref;\n  if (Platform.OS === 'web' && to) {\n    // React Native Web doesn't forward `onClick` if we use `TouchableWithoutFeedback`.\n    // We need to use `onClick` to be able to prevent default browser handling of links.\n    return /*#__PURE__*/React.createElement(Link, _extends({}, rest, {\n      to: to,\n      style: [styles.button, style],\n      onPress: e => {\n        if (!(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && (\n        // ignore clicks with modifier keys\n        e.button == null || e.button === 0) // ignore everything but left clicks\n        ) {\n          e.preventDefault();\n          onPress === null || onPress === void 0 ? void 0 : onPress(e);\n        }\n      }\n      // types for PressableProps and TextProps are incompatible with each other by `null` so we\n      // can't use {...rest} for these 3 props\n      ,\n\n      onLongPress: onLongPress ?? undefined,\n      onPressIn: onPressIn ?? undefined,\n      onPressOut: onPressOut ?? undefined\n    }), children);\n  } else {\n    return /*#__PURE__*/React.createElement(PlatformPressable, _extends({}, rest, {\n      accessibilityRole: accessibilityRole,\n      onPress: onPress\n    }), /*#__PURE__*/React.createElement(View, {\n      style: style\n    }, children));\n  }\n};\n\n/**\n * A component used to show an action item with an icon and a label in a navigation drawer.\n */\nexport default function DrawerItem(props) {\n  const {\n    colors\n  } = useTheme();\n  const {\n    icon,\n    label,\n    labelStyle,\n    to,\n    focused = false,\n    allowFontScaling,\n    activeTintColor = colors.primary,\n    inactiveTintColor = Color(colors.text).alpha(0.68).rgb().string(),\n    activeBackgroundColor = Color(activeTintColor).alpha(0.12).rgb().string(),\n    inactiveBackgroundColor = 'transparent',\n    style,\n    onPress,\n    pressColor,\n    pressOpacity,\n    testID,\n    accessibilityLabel,\n    ...rest\n  } = props;\n  const {\n    borderRadius = 4\n  } = StyleSheet.flatten(style || {});\n  const color = focused ? activeTintColor : inactiveTintColor;\n  const backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;\n  const iconNode = icon ? icon({\n    size: 24,\n    focused,\n    color\n  }) : null;\n  return /*#__PURE__*/React.createElement(View, _extends({\n    collapsable: false\n  }, rest, {\n    style: [styles.container, {\n      borderRadius,\n      backgroundColor\n    }, style]\n  }), /*#__PURE__*/React.createElement(LinkPressable, {\n    testID: testID,\n    onPress: onPress,\n    style: [styles.wrapper, {\n      borderRadius\n    }],\n    accessibilityLabel: accessibilityLabel,\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      selected: focused\n    },\n    pressColor: pressColor,\n    pressOpacity: pressOpacity,\n    to: to\n  }, /*#__PURE__*/React.createElement(React.Fragment, null, iconNode, /*#__PURE__*/React.createElement(View, {\n    style: [styles.label, {\n      marginLeft: iconNode ? 32 : 0,\n      marginVertical: 5\n    }]\n  }, typeof label === 'string' ? /*#__PURE__*/React.createElement(Text, {\n    numberOfLines: 1,\n    allowFontScaling: allowFontScaling,\n    style: [{\n      color,\n      fontWeight: '500'\n    }, labelStyle]\n  }, label) : label({\n    color,\n    focused\n  })))));\n}\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n    overflow: 'hidden'\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8\n  },\n  label: {\n    marginRight: 32,\n    flex: 1\n  },\n  button: {\n    display: 'flex'\n  }\n});","map":{"version":3,"names":["PlatformPressable","Link","useTheme","Color","React","Platform","StyleSheet","Text","View","LinkPressable","_ref","children","style","onPress","onLongPress","onPressIn","onPressOut","to","accessibilityRole","rest","OS","createElement","_extends","styles","button","e","metaKey","altKey","ctrlKey","shiftKey","preventDefault","undefined","DrawerItem","props","colors","icon","label","labelStyle","focused","allowFontScaling","activeTintColor","primary","inactiveTintColor","text","alpha","rgb","string","activeBackgroundColor","inactiveBackgroundColor","pressColor","pressOpacity","testID","accessibilityLabel","borderRadius","flatten","color","backgroundColor","iconNode","size","collapsable","container","wrapper","accessibilityState","selected","Fragment","marginLeft","marginVertical","numberOfLines","fontWeight","create","marginHorizontal","overflow","flexDirection","alignItems","padding","marginRight","flex","display"],"sources":["/Users/jojaegyun/Desktop/Project/today/What_are_you_watching_today/node_modules/@react-navigation/drawer/src/views/DrawerItem.tsx"],"sourcesContent":["import { PlatformPressable } from '@react-navigation/elements';\nimport { Link, useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport * as React from 'react';\nimport {\n  Platform,\n  StyleProp,\n  StyleSheet,\n  Text,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\ntype Props = {\n  /**\n   * The label text of the item.\n   */\n  label:\n    | string\n    | ((props: { focused: boolean; color: string }) => React.ReactNode);\n  /**\n   * Icon to display for the `DrawerItem`.\n   */\n  icon?: (props: {\n    focused: boolean;\n    size: number;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * URL to use for the link to the tab.\n   */\n  to?: string;\n  /**\n   * Whether to highlight the drawer item as active.\n   */\n  focused?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress: () => void;\n  /**\n   * Color for the icon and label when the item is active.\n   */\n  activeTintColor?: string;\n  /**\n   * Color for the icon and label when the item is inactive.\n   */\n  inactiveTintColor?: string;\n  /**\n   * Background color for item when its active.\n   */\n  activeBackgroundColor?: string;\n  /**\n   * Background color for item when its inactive.\n   */\n  inactiveBackgroundColor?: string;\n  /**\n   * Color of the touchable effect on press.\n   * Only supported on Android.\n   *\n   * @platform android\n   */\n  pressColor?: string;\n  /**\n   * Opacity of the touchable effect on press.\n   * Only supported on iOS.\n   *\n   * @platform ios\n   */\n  pressOpacity?: number;\n  /**\n   * Style object for the label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * Style object for the wrapper element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Whether label font should scale to respect Text Size accessibility settings.\n   */\n  allowFontScaling?: boolean;\n\n  /**\n   * Accessibility label for drawer item.\n   */\n  accessibilityLabel?: string;\n  /**\n   * ID to locate this drawer item in tests.\n   */\n  testID?: string;\n};\n\nconst LinkPressable = ({\n  children,\n  style,\n  onPress,\n  onLongPress,\n  onPressIn,\n  onPressOut,\n  to,\n  accessibilityRole,\n  ...rest\n}: Omit<React.ComponentProps<typeof PlatformPressable>, 'style'> & {\n  style: StyleProp<ViewStyle>;\n} & {\n  to?: string;\n  children: React.ReactNode;\n  onPress?: () => void;\n}) => {\n  if (Platform.OS === 'web' && to) {\n    // React Native Web doesn't forward `onClick` if we use `TouchableWithoutFeedback`.\n    // We need to use `onClick` to be able to prevent default browser handling of links.\n    return (\n      <Link\n        {...rest}\n        to={to}\n        style={[styles.button, style]}\n        onPress={(e: any) => {\n          if (\n            !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n            (e.button == null || e.button === 0) // ignore everything but left clicks\n          ) {\n            e.preventDefault();\n            onPress?.(e);\n          }\n        }}\n        // types for PressableProps and TextProps are incompatible with each other by `null` so we\n        // can't use {...rest} for these 3 props\n        onLongPress={onLongPress ?? undefined}\n        onPressIn={onPressIn ?? undefined}\n        onPressOut={onPressOut ?? undefined}\n      >\n        {children}\n      </Link>\n    );\n  } else {\n    return (\n      <PlatformPressable\n        {...rest}\n        accessibilityRole={accessibilityRole}\n        onPress={onPress}\n      >\n        <View style={style}>{children}</View>\n      </PlatformPressable>\n    );\n  }\n};\n\n/**\n * A component used to show an action item with an icon and a label in a navigation drawer.\n */\nexport default function DrawerItem(props: Props) {\n  const { colors } = useTheme();\n\n  const {\n    icon,\n    label,\n    labelStyle,\n    to,\n    focused = false,\n    allowFontScaling,\n    activeTintColor = colors.primary,\n    inactiveTintColor = Color(colors.text).alpha(0.68).rgb().string(),\n    activeBackgroundColor = Color(activeTintColor).alpha(0.12).rgb().string(),\n    inactiveBackgroundColor = 'transparent',\n    style,\n    onPress,\n    pressColor,\n    pressOpacity,\n    testID,\n    accessibilityLabel,\n    ...rest\n  } = props;\n\n  const { borderRadius = 4 } = StyleSheet.flatten(style || {});\n  const color = focused ? activeTintColor : inactiveTintColor;\n  const backgroundColor = focused\n    ? activeBackgroundColor\n    : inactiveBackgroundColor;\n\n  const iconNode = icon ? icon({ size: 24, focused, color }) : null;\n\n  return (\n    <View\n      collapsable={false}\n      {...rest}\n      style={[styles.container, { borderRadius, backgroundColor }, style]}\n    >\n      <LinkPressable\n        testID={testID}\n        onPress={onPress}\n        style={[styles.wrapper, { borderRadius }]}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityRole=\"button\"\n        accessibilityState={{ selected: focused }}\n        pressColor={pressColor}\n        pressOpacity={pressOpacity}\n        to={to}\n      >\n        <React.Fragment>\n          {iconNode}\n          <View\n            style={[\n              styles.label,\n              { marginLeft: iconNode ? 32 : 0, marginVertical: 5 },\n            ]}\n          >\n            {typeof label === 'string' ? (\n              <Text\n                numberOfLines={1}\n                allowFontScaling={allowFontScaling}\n                style={[\n                  {\n                    color,\n                    fontWeight: '500',\n                  },\n                  labelStyle,\n                ]}\n              >\n                {label}\n              </Text>\n            ) : (\n              label({ color, focused })\n            )}\n          </View>\n        </React.Fragment>\n      </LinkPressable>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n    overflow: 'hidden',\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8,\n  },\n  label: {\n    marginRight: 32,\n    flex: 1,\n  },\n  button: {\n    display: 'flex',\n  },\n});\n"],"mappings":";;;;;;;;;;;;;;AAAA,SAASA,iBAAiB,QAAQ,4BAA4B;AAC9D,SAASC,IAAI,EAAEC,QAAQ,QAAQ,0BAA0B;AACzD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SACEC,QAAQ,EAERC,UAAU,EACVC,IAAI,EAEJC,IAAI,QAEC,cAAc;AAkFrB,MAAMC,aAAa,GAAGC,IAAA,IAgBhB;EAAA,IAhBiB;IACrBC,QAAQ;IACRC,KAAK;IACLC,OAAO;IACPC,WAAW;IACXC,SAAS;IACTC,UAAU;IACVC,EAAE;IACFC,iBAAiB;IACjB,GAAGC;EAOL,CAAC,GAAAT,IAAA;EACC,IAAIL,QAAQ,CAACe,EAAE,KAAK,KAAK,IAAIH,EAAE,EAAE;IAC/B;IACA;IACA,oBACEb,KAAA,CAAAiB,aAAA,CAACpB,IAAI,EAAAqB,QAAA,KACCH,IAAI;MACRF,EAAE,EAAEA,EAAG;MACPL,KAAK,EAAE,CAACW,MAAM,CAACC,MAAM,EAAEZ,KAAK,CAAE;MAC9BC,OAAO,EAAGY,CAAM,IAAK;QACnB,IACE,EAAEA,CAAC,CAACC,OAAO,IAAID,CAAC,CAACE,MAAM,IAAIF,CAAC,CAACG,OAAO,IAAIH,CAAC,CAACI,QAAQ,CAAC;QAAI;QACtDJ,CAAC,CAACD,MAAM,IAAI,IAAI,IAAIC,CAAC,CAACD,MAAM,KAAK,CAAC,CAAC,CAAC;QAAA,EACrC;UACAC,CAAC,CAACK,cAAc,EAAE;UAClBjB,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAGY,CAAC,CAAC;QACd;MACF;MACA;MACA;MAAA;;MACAX,WAAW,EAAEA,WAAW,IAAIiB,SAAU;MACtChB,SAAS,EAAEA,SAAS,IAAIgB,SAAU;MAClCf,UAAU,EAAEA,UAAU,IAAIe;IAAU,IAEnCpB,QAAQ,CACJ;EAEX,CAAC,MAAM;IACL,oBACEP,KAAA,CAAAiB,aAAA,CAACrB,iBAAiB,EAAAsB,QAAA,KACZH,IAAI;MACRD,iBAAiB,EAAEA,iBAAkB;MACrCL,OAAO,EAAEA;IAAQ,iBAEjBT,KAAA,CAAAiB,aAAA,CAACb,IAAI;MAACI,KAAK,EAAEA;IAAM,GAAED,QAAQ,CAAQ,CACnB;EAExB;AACF,CAAC;;AAED;AACA;AACA;AACA,eAAe,SAASqB,UAAUA,CAACC,KAAY,EAAE;EAC/C,MAAM;IAAEC;EAAO,CAAC,GAAGhC,QAAQ,EAAE;EAE7B,MAAM;IACJiC,IAAI;IACJC,KAAK;IACLC,UAAU;IACVpB,EAAE;IACFqB,OAAO,GAAG,KAAK;IACfC,gBAAgB;IAChBC,eAAe,GAAGN,MAAM,CAACO,OAAO;IAChCC,iBAAiB,GAAGvC,KAAK,CAAC+B,MAAM,CAACS,IAAI,CAAC,CAACC,KAAK,CAAC,IAAI,CAAC,CAACC,GAAG,EAAE,CAACC,MAAM,EAAE;IACjEC,qBAAqB,GAAG5C,KAAK,CAACqC,eAAe,CAAC,CAACI,KAAK,CAAC,IAAI,CAAC,CAACC,GAAG,EAAE,CAACC,MAAM,EAAE;IACzEE,uBAAuB,GAAG,aAAa;IACvCpC,KAAK;IACLC,OAAO;IACPoC,UAAU;IACVC,YAAY;IACZC,MAAM;IACNC,kBAAkB;IAClB,GAAGjC;EACL,CAAC,GAAGc,KAAK;EAET,MAAM;IAAEoB,YAAY,GAAG;EAAE,CAAC,GAAG/C,UAAU,CAACgD,OAAO,CAAC1C,KAAK,IAAI,CAAC,CAAC,CAAC;EAC5D,MAAM2C,KAAK,GAAGjB,OAAO,GAAGE,eAAe,GAAGE,iBAAiB;EAC3D,MAAMc,eAAe,GAAGlB,OAAO,GAC3BS,qBAAqB,GACrBC,uBAAuB;EAE3B,MAAMS,QAAQ,GAAGtB,IAAI,GAAGA,IAAI,CAAC;IAAEuB,IAAI,EAAE,EAAE;IAAEpB,OAAO;IAAEiB;EAAM,CAAC,CAAC,GAAG,IAAI;EAEjE,oBACEnD,KAAA,CAAAiB,aAAA,CAACb,IAAI,EAAAc,QAAA;IACHqC,WAAW,EAAE;EAAM,GACfxC,IAAI;IACRP,KAAK,EAAE,CAACW,MAAM,CAACqC,SAAS,EAAE;MAAEP,YAAY;MAAEG;IAAgB,CAAC,EAAE5C,KAAK;EAAE,iBAEpER,KAAA,CAAAiB,aAAA,CAACZ,aAAa;IACZ0C,MAAM,EAAEA,MAAO;IACftC,OAAO,EAAEA,OAAQ;IACjBD,KAAK,EAAE,CAACW,MAAM,CAACsC,OAAO,EAAE;MAAER;IAAa,CAAC,CAAE;IAC1CD,kBAAkB,EAAEA,kBAAmB;IACvClC,iBAAiB,EAAC,QAAQ;IAC1B4C,kBAAkB,EAAE;MAAEC,QAAQ,EAAEzB;IAAQ,CAAE;IAC1CW,UAAU,EAAEA,UAAW;IACvBC,YAAY,EAAEA,YAAa;IAC3BjC,EAAE,EAAEA;EAAG,gBAEPb,KAAA,CAAAiB,aAAA,CAACjB,KAAK,CAAC4D,QAAQ,QACZP,QAAQ,eACTrD,KAAA,CAAAiB,aAAA,CAACb,IAAI;IACHI,KAAK,EAAE,CACLW,MAAM,CAACa,KAAK,EACZ;MAAE6B,UAAU,EAAER,QAAQ,GAAG,EAAE,GAAG,CAAC;MAAES,cAAc,EAAE;IAAE,CAAC;EACpD,GAED,OAAO9B,KAAK,KAAK,QAAQ,gBACxBhC,KAAA,CAAAiB,aAAA,CAACd,IAAI;IACH4D,aAAa,EAAE,CAAE;IACjB5B,gBAAgB,EAAEA,gBAAiB;IACnC3B,KAAK,EAAE,CACL;MACE2C,KAAK;MACLa,UAAU,EAAE;IACd,CAAC,EACD/B,UAAU;EACV,GAEDD,KAAK,CACD,GAEPA,KAAK,CAAC;IAAEmB,KAAK;IAAEjB;EAAQ,CAAC,CACzB,CACI,CACQ,CACH,CACX;AAEX;AAEA,MAAMf,MAAM,GAAGjB,UAAU,CAAC+D,MAAM,CAAC;EAC/BT,SAAS,EAAE;IACTU,gBAAgB,EAAE,EAAE;IACpBJ,cAAc,EAAE,CAAC;IACjBK,QAAQ,EAAE;EACZ,CAAC;EACDV,OAAO,EAAE;IACPW,aAAa,EAAE,KAAK;IACpBC,UAAU,EAAE,QAAQ;IACpBC,OAAO,EAAE;EACX,CAAC;EACDtC,KAAK,EAAE;IACLuC,WAAW,EAAE,EAAE;IACfC,IAAI,EAAE;EACR,CAAC;EACDpD,MAAM,EAAE;IACNqD,OAAO,EAAE;EACX;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}