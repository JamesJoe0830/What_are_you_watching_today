{"ast":null,"code":"function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport { Platform, Pressable, StyleSheet } from 'react-native';\nimport Animated, { useAnimatedProps, useAnimatedStyle } from 'react-native-reanimated';\nconst PROGRESS_EPSILON = 0.05;\nconst Overlay = /*#__PURE__*/React.forwardRef(function Overlay(_ref, ref) {\n  let {\n    progress,\n    onPress,\n    style,\n    accessibilityLabel = 'Close drawer',\n    ...props\n  } = _ref;\n  const animatedStyle = useAnimatedStyle(() => {\n    return {\n      opacity: progress.value,\n      // We don't want the user to be able to press through the overlay when drawer is open\n      // We can send the overlay behind the screen to avoid it\n      zIndex: progress.value > PROGRESS_EPSILON ? 0 : -1\n    };\n  });\n  const animatedProps = useAnimatedProps(() => {\n    const active = progress.value > PROGRESS_EPSILON;\n    return {\n      pointerEvents: active ? 'auto' : 'none',\n      accessibilityElementsHidden: !active,\n      importantForAccessibility: active ? 'auto' : 'no-hide-descendants'\n    };\n  });\n  return /*#__PURE__*/React.createElement(Animated.View, _extends({}, props, {\n    ref: ref,\n    style: [styles.overlay, overlayStyle, animatedStyle, style],\n    animatedProps: animatedProps\n  }), /*#__PURE__*/React.createElement(Pressable, {\n    onPress: onPress,\n    style: styles.pressable,\n    accessibilityRole: \"button\",\n    accessibilityLabel: accessibilityLabel\n  }));\n});\nconst overlayStyle = Platform.select({\n  web: {\n    // Disable touch highlight on mobile Safari.\n    // WebkitTapHighlightColor must be used outside of StyleSheet.create because react-native-web will omit the property.\n    WebkitTapHighlightColor: 'transparent'\n  },\n  default: {}\n});\nconst styles = StyleSheet.create({\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)'\n  },\n  pressable: {\n    flex: 1,\n    pointerEvents: 'auto'\n  }\n});\nexport default Overlay;","map":{"version":3,"names":["React","Platform","Pressable","StyleSheet","Animated","useAnimatedProps","useAnimatedStyle","PROGRESS_EPSILON","Overlay","forwardRef","_ref","ref","progress","onPress","style","accessibilityLabel","props","animatedStyle","opacity","value","zIndex","animatedProps","active","pointerEvents","accessibilityElementsHidden","importantForAccessibility","createElement","View","_extends","styles","overlay","overlayStyle","pressable","accessibilityRole","select","web","WebkitTapHighlightColor","default","create","absoluteFillObject","backgroundColor","flex"],"sources":["/Users/jojaegyun/Desktop/Project/today/What_are_you_watching_today/node_modules/@react-navigation/drawer/src/views/modern/Overlay.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Platform, Pressable, StyleSheet } from 'react-native';\nimport Animated, {\n  useAnimatedProps,\n  useAnimatedStyle,\n} from 'react-native-reanimated';\n\nconst PROGRESS_EPSILON = 0.05;\n\ntype Props = React.ComponentProps<typeof Animated.View> & {\n  progress: Animated.SharedValue<number>;\n  onPress: () => void;\n  accessibilityLabel?: string;\n};\n\nconst Overlay = React.forwardRef(function Overlay(\n  {\n    progress,\n    onPress,\n    style,\n    accessibilityLabel = 'Close drawer',\n    ...props\n  }: Props,\n  ref: React.Ref<Animated.View>\n) {\n  const animatedStyle = useAnimatedStyle(() => {\n    return {\n      opacity: progress.value,\n      // We don't want the user to be able to press through the overlay when drawer is open\n      // We can send the overlay behind the screen to avoid it\n      zIndex: progress.value > PROGRESS_EPSILON ? 0 : -1,\n    };\n  });\n\n  const animatedProps = useAnimatedProps(() => {\n    const active = progress.value > PROGRESS_EPSILON;\n\n    return {\n      pointerEvents: active ? 'auto' : 'none',\n      accessibilityElementsHidden: !active,\n      importantForAccessibility: active ? 'auto' : 'no-hide-descendants',\n    } as const;\n  });\n\n  return (\n    <Animated.View\n      {...props}\n      ref={ref}\n      style={[styles.overlay, overlayStyle, animatedStyle, style]}\n      animatedProps={animatedProps}\n    >\n      <Pressable\n        onPress={onPress}\n        style={styles.pressable}\n        accessibilityRole=\"button\"\n        accessibilityLabel={accessibilityLabel}\n      />\n    </Animated.View>\n  );\n});\n\nconst overlayStyle = Platform.select<Record<string, string>>({\n  web: {\n    // Disable touch highlight on mobile Safari.\n    // WebkitTapHighlightColor must be used outside of StyleSheet.create because react-native-web will omit the property.\n    WebkitTapHighlightColor: 'transparent',\n  },\n  default: {},\n});\n\nconst styles = StyleSheet.create({\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n  },\n  pressable: {\n    flex: 1,\n    pointerEvents: 'auto',\n  },\n});\n\nexport default Overlay;\n"],"mappings":";;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,QAAQ,cAAc;AAC9D,OAAOC,QAAQ,IACbC,gBAAgB,EAChBC,gBAAgB,QACX,yBAAyB;AAEhC,MAAMC,gBAAgB,GAAG,IAAI;AAQ7B,MAAMC,OAAO,gBAAGR,KAAK,CAACS,UAAU,CAAC,SAASD,OAAOA,CAAAE,IAAA,EAQ/CC,GAA6B,EAC7B;EAAA,IARA;IACEC,QAAQ;IACRC,OAAO;IACPC,KAAK;IACLC,kBAAkB,GAAG,cAAc;IACnC,GAAGC;EACE,CAAC,GAAAN,IAAA;EAGR,MAAMO,aAAa,GAAGX,gBAAgB,CAAC,MAAM;IAC3C,OAAO;MACLY,OAAO,EAAEN,QAAQ,CAACO,KAAK;MACvB;MACA;MACAC,MAAM,EAAER,QAAQ,CAACO,KAAK,GAAGZ,gBAAgB,GAAG,CAAC,GAAG,CAAC;IACnD,CAAC;EACH,CAAC,CAAC;EAEF,MAAMc,aAAa,GAAGhB,gBAAgB,CAAC,MAAM;IAC3C,MAAMiB,MAAM,GAAGV,QAAQ,CAACO,KAAK,GAAGZ,gBAAgB;IAEhD,OAAO;MACLgB,aAAa,EAAED,MAAM,GAAG,MAAM,GAAG,MAAM;MACvCE,2BAA2B,EAAE,CAACF,MAAM;MACpCG,yBAAyB,EAAEH,MAAM,GAAG,MAAM,GAAG;IAC/C,CAAC;EACH,CAAC,CAAC;EAEF,oBACEtB,KAAA,CAAA0B,aAAA,CAACtB,QAAQ,CAACuB,IAAI,EAAAC,QAAA,KACRZ,KAAK;IACTL,GAAG,EAAEA,GAAI;IACTG,KAAK,EAAE,CAACe,MAAM,CAACC,OAAO,EAAEC,YAAY,EAAEd,aAAa,EAAEH,KAAK,CAAE;IAC5DO,aAAa,EAAEA;EAAc,iBAE7BrB,KAAA,CAAA0B,aAAA,CAACxB,SAAS;IACRW,OAAO,EAAEA,OAAQ;IACjBC,KAAK,EAAEe,MAAM,CAACG,SAAU;IACxBC,iBAAiB,EAAC,QAAQ;IAC1BlB,kBAAkB,EAAEA;EAAmB,EACvC,CACY;AAEpB,CAAC,CAAC;AAEF,MAAMgB,YAAY,GAAG9B,QAAQ,CAACiC,MAAM,CAAyB;EAC3DC,GAAG,EAAE;IACH;IACA;IACAC,uBAAuB,EAAE;EAC3B,CAAC;EACDC,OAAO,EAAE,CAAC;AACZ,CAAC,CAAC;AAEF,MAAMR,MAAM,GAAG1B,UAAU,CAACmC,MAAM,CAAC;EAC/BR,OAAO,EAAE;IACP,GAAG3B,UAAU,CAACoC,kBAAkB;IAChCC,eAAe,EAAE;EACnB,CAAC;EACDR,SAAS,EAAE;IACTS,IAAI,EAAE,CAAC;IACPlB,aAAa,EAAE;EACjB;AACF,CAAC,CAAC;AAEF,eAAef,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}