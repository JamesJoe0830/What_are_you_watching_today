{"ast":null,"code":"function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport { Platform, Pressable, StyleSheet } from 'react-native';\nimport Animated from 'react-native-reanimated';\nconst {\n  // @ts-expect-error: this is to support reanimated 1\n  interpolate: interpolateDeprecated,\n  interpolateNode,\n  cond,\n  greaterThan\n} = Animated;\nconst interpolate = interpolateNode ?? interpolateDeprecated;\nconst PROGRESS_EPSILON = 0.05;\nconst Overlay = /*#__PURE__*/React.forwardRef(function Overlay(_ref, ref) {\n  let {\n    progress,\n    onPress,\n    style,\n    accessibilityLabel = 'Close drawer',\n    ...props\n  } = _ref;\n  const animatedStyle = {\n    opacity: interpolate(progress, {\n      // Default input range is [PROGRESS_EPSILON, 1]\n      // On Windows, the output value is 1 when input value is out of range for some reason\n      // The default value 0 will be interpolated to 1 in this case, which is not what we want.\n      // Therefore changing input range on Windows to [0,1] instead.\n      inputRange: Platform.OS === 'windows' || Platform.OS === 'macos' ? [0, 1] : [PROGRESS_EPSILON, 1],\n      outputRange: [0, 1]\n    }),\n    // We don't want the user to be able to press through the overlay when drawer is open\n    // One approach is to adjust the pointerEvents based on the progress\n    // But we can also send the overlay behind the screen, which works, and is much less code\n    zIndex: cond(greaterThan(progress, PROGRESS_EPSILON), 0, -1)\n  };\n  return /*#__PURE__*/React.createElement(Animated.View, _extends({}, props, {\n    ref: ref,\n    style: [styles.overlay, overlayStyle, animatedStyle, style]\n  }), /*#__PURE__*/React.createElement(Pressable, {\n    onPress: onPress,\n    style: styles.pressable,\n    accessibilityRole: \"button\",\n    accessibilityLabel: accessibilityLabel\n  }));\n});\nconst overlayStyle = Platform.select({\n  web: {\n    // Disable touch highlight on mobile Safari.\n    // WebkitTapHighlightColor must be used outside of StyleSheet.create because react-native-web will omit the property.\n    WebkitTapHighlightColor: 'transparent'\n  },\n  default: {}\n});\nconst styles = StyleSheet.create({\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)'\n  },\n  pressable: {\n    flex: 1\n  }\n});\nexport default Overlay;","map":{"version":3,"names":["React","Platform","Pressable","StyleSheet","Animated","interpolate","interpolateDeprecated","interpolateNode","cond","greaterThan","PROGRESS_EPSILON","Overlay","forwardRef","_ref","ref","progress","onPress","style","accessibilityLabel","props","animatedStyle","opacity","inputRange","OS","outputRange","zIndex","createElement","View","_extends","styles","overlay","overlayStyle","pressable","accessibilityRole","select","web","WebkitTapHighlightColor","default","create","absoluteFillObject","backgroundColor","flex"],"sources":["/Users/jojaegyun/Desktop/Project/today/What_are_you_watching_today/node_modules/@react-navigation/drawer/src/views/legacy/Overlay.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Platform, Pressable, StyleSheet } from 'react-native';\nimport Animated from 'react-native-reanimated';\n\nconst {\n  // @ts-expect-error: this is to support reanimated 1\n  interpolate: interpolateDeprecated,\n  interpolateNode,\n  cond,\n  greaterThan,\n} = Animated;\n\nconst interpolate: typeof interpolateNode =\n  interpolateNode ?? interpolateDeprecated;\n\nconst PROGRESS_EPSILON = 0.05;\n\ntype Props = React.ComponentProps<typeof Animated.View> & {\n  progress: Animated.Node<number>;\n  onPress: () => void;\n  accessibilityLabel?: string;\n};\n\nconst Overlay = React.forwardRef(function Overlay(\n  {\n    progress,\n    onPress,\n    style,\n    accessibilityLabel = 'Close drawer',\n    ...props\n  }: Props,\n  ref: React.Ref<Animated.View>\n) {\n  const animatedStyle = {\n    opacity: interpolate(progress, {\n      // Default input range is [PROGRESS_EPSILON, 1]\n      // On Windows, the output value is 1 when input value is out of range for some reason\n      // The default value 0 will be interpolated to 1 in this case, which is not what we want.\n      // Therefore changing input range on Windows to [0,1] instead.\n      inputRange:\n        Platform.OS === 'windows' || Platform.OS === 'macos'\n          ? [0, 1]\n          : [PROGRESS_EPSILON, 1],\n      outputRange: [0, 1],\n    }),\n    // We don't want the user to be able to press through the overlay when drawer is open\n    // One approach is to adjust the pointerEvents based on the progress\n    // But we can also send the overlay behind the screen, which works, and is much less code\n    zIndex: cond(greaterThan(progress, PROGRESS_EPSILON), 0, -1),\n  };\n\n  return (\n    <Animated.View\n      {...props}\n      ref={ref}\n      style={[styles.overlay, overlayStyle, animatedStyle, style]}\n    >\n      <Pressable\n        onPress={onPress}\n        style={styles.pressable}\n        accessibilityRole=\"button\"\n        accessibilityLabel={accessibilityLabel}\n      />\n    </Animated.View>\n  );\n});\n\nconst overlayStyle = Platform.select<Record<string, string>>({\n  web: {\n    // Disable touch highlight on mobile Safari.\n    // WebkitTapHighlightColor must be used outside of StyleSheet.create because react-native-web will omit the property.\n    WebkitTapHighlightColor: 'transparent',\n  },\n  default: {},\n});\n\nconst styles = StyleSheet.create({\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n  },\n  pressable: {\n    flex: 1,\n  },\n});\n\nexport default Overlay;\n"],"mappings":";;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,QAAQ,cAAc;AAC9D,OAAOC,QAAQ,MAAM,yBAAyB;AAE9C,MAAM;EACJ;EACAC,WAAW,EAAEC,qBAAqB;EAClCC,eAAe;EACfC,IAAI;EACJC;AACF,CAAC,GAAGL,QAAQ;AAEZ,MAAMC,WAAmC,GACvCE,eAAe,IAAID,qBAAqB;AAE1C,MAAMI,gBAAgB,GAAG,IAAI;AAQ7B,MAAMC,OAAO,gBAAGX,KAAK,CAACY,UAAU,CAAC,SAASD,OAAOA,CAAAE,IAAA,EAQ/CC,GAA6B,EAC7B;EAAA,IARA;IACEC,QAAQ;IACRC,OAAO;IACPC,KAAK;IACLC,kBAAkB,GAAG,cAAc;IACnC,GAAGC;EACE,CAAC,GAAAN,IAAA;EAGR,MAAMO,aAAa,GAAG;IACpBC,OAAO,EAAEhB,WAAW,CAACU,QAAQ,EAAE;MAC7B;MACA;MACA;MACA;MACAO,UAAU,EACRrB,QAAQ,CAACsB,EAAE,KAAK,SAAS,IAAItB,QAAQ,CAACsB,EAAE,KAAK,OAAO,GAChD,CAAC,CAAC,EAAE,CAAC,CAAC,GACN,CAACb,gBAAgB,EAAE,CAAC,CAAC;MAC3Bc,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC;IACpB,CAAC,CAAC;IACF;IACA;IACA;IACAC,MAAM,EAAEjB,IAAI,CAACC,WAAW,CAACM,QAAQ,EAAEL,gBAAgB,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAC7D,CAAC;EAED,oBACEV,KAAA,CAAA0B,aAAA,CAACtB,QAAQ,CAACuB,IAAI,EAAAC,QAAA,KACRT,KAAK;IACTL,GAAG,EAAEA,GAAI;IACTG,KAAK,EAAE,CAACY,MAAM,CAACC,OAAO,EAAEC,YAAY,EAAEX,aAAa,EAAEH,KAAK;EAAE,iBAE5DjB,KAAA,CAAA0B,aAAA,CAACxB,SAAS;IACRc,OAAO,EAAEA,OAAQ;IACjBC,KAAK,EAAEY,MAAM,CAACG,SAAU;IACxBC,iBAAiB,EAAC,QAAQ;IAC1Bf,kBAAkB,EAAEA;EAAmB,EACvC,CACY;AAEpB,CAAC,CAAC;AAEF,MAAMa,YAAY,GAAG9B,QAAQ,CAACiC,MAAM,CAAyB;EAC3DC,GAAG,EAAE;IACH;IACA;IACAC,uBAAuB,EAAE;EAC3B,CAAC;EACDC,OAAO,EAAE,CAAC;AACZ,CAAC,CAAC;AAEF,MAAMR,MAAM,GAAG1B,UAAU,CAACmC,MAAM,CAAC;EAC/BR,OAAO,EAAE;IACP,GAAG3B,UAAU,CAACoC,kBAAkB;IAChCC,eAAe,EAAE;EACnB,CAAC;EACDR,SAAS,EAAE;IACTS,IAAI,EAAE;EACR;AACF,CAAC,CAAC;AAEF,eAAe9B,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}